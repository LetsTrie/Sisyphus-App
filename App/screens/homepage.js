import React, { useState, useEffect } from 'react';
import {
  Text,
  View,
  StyleSheet,
  ScrollView,
  ImageBackground,
  TouchableOpacity,
  TouchableWithoutFeedback,
  BackHandler,
  ToastAndroid,
  Modal,
} from 'react-native';
import { connect } from 'react-redux';
import Toast from 'react-native-toast-message';
import Constants from 'expo-constants';
import { AntDesign } from '@expo/vector-icons';

import readingMaterials from './readingMaterials/data';
import { AppButton } from '../components/button';
import { logoutAction } from '../redux/actions/authActions';
import { getUserInformations } from '../services/user';
import { errorLog } from '../helpers/log';
import { ModalWithTitleDescription } from '../components/ModalWithTitleDescription';

const screenName = 'Homepage';
const emoji = [
  {
    icon: 'ЁЯШН',
    label: 'Great',
    banglaLabel: 'ржЦрзБржм ржнрж╛рж▓рзЛ',
    weight: 60,
    toasterMessage: 'ржЬрзЗржирзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ ржпрзЗ ржЖржкржирж┐ ржЖржЬ ржЦрзБржм ржнрж╛рж▓рзЛ ржЖржЫрзЗржи! ЁЯШН',
  },
  {
    icon: 'ЁЯШЗ',
    label: 'Good',
    banglaLabel: 'ржнрж╛рж▓рзЛ',
    weight: 60,
    toasterMessage: 'ржЬрзЗржирзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ ржпрзЗ ржЖржкржирж┐ ржЖржЬ ржнрж╛рж▓рзЛ ржЖржЫрзЗржи! ЁЯШН',
  },
  {
    icon: 'ЁЯШК',
    label: 'Ok',
    banglaLabel: 'ржорзЛржЯрж╛ржорзБржЯрж┐',
    weight: 60,
    toasterMessage:
      'ржЬрзЗржирзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ ржпрзЗ ржЖржкржирж┐ ржЖржЬ ржорзЛржЯрж╛ржорзБржЯрж┐ ржнрж╛рж▓рзЛ ржЖржЫрзЗржи! ЁЯШК',
  },
  {
    icon: 'ЁЯШЮ',
    label: 'Bad',
    banglaLabel: 'ржнрж╛рж▓рзЛ ржирзЗржЗ',
    weight: 60,
    toasterMessage: 'ржЬрзЗржирзЗ ржЦрж╛рж░рж╛ржк рж▓рж╛ржЧржЫрзЗ ржпрзЗ ржЖржкржирж┐ ржЖржЬ ржнрж╛рж▓рзЛ ржирзЗржЗ! ЁЯШЮ',
  },
  {
    icon: 'ЁЯШг',
    label: 'Awful',
    banglaLabel: 'ржПржХржжржо ржнрж╛рж▓рзЛ ржирзЗржЗ',
    weight: 60,
    toasterMessage: 'ржЬрзЗржирзЗ ржЦрж╛рж░рж╛ржк рж▓рж╛ржЧржЫрзЗ ржпрзЗ ржЖржкржирж┐ ржЖржЬ ржПржХржжржо ржнрж╛рж▓рзЛ ржирзЗржЗ! ЁЯШЮ',
  },
];
const cap1stLetter = (string) => {
  if (!string) return string;
  return string.charAt(0).toUpperCase() + string.slice(1);
};

const Homepage = ({ navigation, ...props }) => {
  const { logoutAction } = props;

  const [modalVisible, setModalVisible] = useState(false);
  const [username, setUsername] = useState('');
  const [modalTitle, setModalTitle] = useState('');
  const [modalDescription, setModalDescription] = useState('');
  const [modalNavigateTo, setModalNavigateTo] = useState('');
  const [modalButtonText, setModalButtonText] = useState('');
  const [modalIcon, setModalIcon] = useState(null);
  const [
    modalReturnToHomepageExists,
    setModalReturnToHomepageExists,
  ] = useState(false);
  const [
    isPressedOnReadingMaterials,
    setIsPressedOnReadingMaterials,
  ] = useState(false);
  const [isPressedOnPsychoeducation, setIsPressedOnPsychoEducation] =
    useState(false);
  const [
    isPressedOnSonkhiptoKoushol,
    setIsPressedOnSonkhiptoKoushol,
  ] = useState(false);

  const closeModal = () => setModalVisible(false);

  const logoutFromApp = async () => {
    await logoutAction();
    navigation.navigate('LoginSignup');
  };

  useEffect(() => {
    (async () => {
      try {
        const { firstName, name, isAccountVerified, ...userInfo } =
          await getUserInformations(props.accessToken);

        setUsername(cap1stLetter(firstName || name));

        if (!isAccountVerified) {
          navigation.navigate('DemographicInformation');
        }
      } catch (error) {
        await logoutFromApp();
        errorLog(error.toString());
      }
    })();
  }, []);

  function handleBackButtonClick() {
    navigation.navigate('LoginSignup');
    return true;
  }

  const handleEmojiPress = (emoji) => {
    if (emoji.label === 'Awful') {
      setModalVisible(true);
      setModalTitle('');
      setModalDescription(
        `ржЬрзЗржирзЗ ржЦрж╛рж░рж╛ржк рж▓рж╛ржЧржЫрзЗ ржпрзЗ ржЖржкржирж┐ ржЖржЬ ржПржХржжржо ржнрж╛рж▓рзЛ ржирзЗржЗ! ржЖржкржирж┐ рждрж╛рзОржХрзНрж╖ржирж┐ржХ ржЙржкрж╢ржорзЗрж░ ржЬржирзНржп ржЕрзНржпрж╛ржкрзЗрж░ ржЙрж▓рзНрж▓рж┐ржЦрж┐ржд ржХрзМрж╢рж▓ржЧрзБрж▓рзЛ ржЕржирзБрж╢рзАрж▓ржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи`,
      );
      setModalReturnToHomepageExists(true);
      setModalButtonText('рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЙржкрж╢ржо');
      setModalNavigateTo('TatkhonikUposhom');
      setModalIcon(require('../assests/images/CryingIcon.jpeg'));
    } else {
      ToastAndroid.showWithGravity(
        emoji.toasterMessage,
        ToastAndroid.LONG,
        ToastAndroid.CENTER,
      );
    }
  };

  const showModal = (sectionName) => {
    setModalIcon(null);
    setModalReturnToHomepageExists(false);
    if (sectionName === 'quickrelief') {
      setModalVisible(true);
      setModalTitle('рждрж╛рзОржХрзНрж╖ржирж┐ржХ ржЙржкрж╢ржо');
      setModalDescription(`рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЙржкрж╢ржорзЗрж░ ржХрзМрж╢рж▓ржЧрзБрж▓рзЛ ржЖржкржирж┐ ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗржЗ ржирж┐ржЬрзЗржХрзЗ ржПржХржЯрзБ рж╕рзБрж╕рзНржерж┐рж░ ржУ ржирж┐ржЬрзЗрж░ ржЕржирзБржнрзВрждрж┐ ржмрж╛ ржЪрж┐ржирзНрждрж╛рж░ ржЙржкрж░ ржирж┐рзЯржирзНрждрзНрж░ржг ржирж┐рзЯрзЗ ржЖрж╕рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред ржоржирзЗ рж░рж╛ржЦржмрзЗржи ржПржЗ ржХрзМрж╢рж▓ржЧрзБрж▓рзЛ ржЖржкржирж╛ржХрзЗ ржПржХржЯрж┐ рж╕рж╛ржорзЯрж┐ржХ ржЙржкрж╢ржо ржжрж┐рждрзЗ рж╕ржХрзНрж╖ржо, рждржмрзЗ ржПржЯрж╛ ржХрзЛржи рж╕рзНржерж╛рзЯрзА рж╕ржорж╛ржзрж╛ржи ржирж╛ред ржЖржкрж╛рждржд ржПржХржЯрзБ рж╕рзНржерж┐рж░ рж╣рзЯрзЗ ржЖржкржирж┐ ржзрзАрж░рзЗ ржПржЗ ржПржкрж╕рзЗ ржжрзЗрзЯрж╛ ржЕржирзНржпрж╛ржирзНржп ржХрзМрж╢рж▓ржЧрзБрж▓рзЛ ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рзБржиред рждржмрзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЙржкрж╢ржорзЗрж░ ржХрзМрж╢рж▓ржЧрзБрж▓рзЛ, ржпрзЗржЯрж╛/ржпрзЗржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж┐ ржХрж┐ржЫрзБржЯрж╛ ржнрж╛рж▓ ржмрж╛ рж╕рзНржерж┐рж░ ржмрзЛржз ржХрж░ржмрзЗржи, рж╕рзЗржЧрзБрж▓рзЛ ржЦрзБржм ржирж┐рзЯржорж┐ржд ржмрзНржпрж╛ржмрж╣рж╛рж░ ржХрж░рзЗ ржЧрзЗрж▓рзЗ ржЖржкржирж╛рж░ рж╕рж╛рж░рзНржмрж┐ржХ ржорж╛ржирж╕рж┐ржХ ржЕржмрж╕рзНржерж╛рж░ ржЙржкрж░ ржЕржкрзЗржХрзНрж╖рж╛ржХрзГржд рж╕рзНржерж╛рзЯрзА ржЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржнрж╛ржм ржХрж╛ржЬ ржХрж░ржмрзЗред
 
ржЦрзБржм рждрзАржмрзНрж░ ржХрзЛржи ржЕржирзБржнрзВрждрж┐ (рж░рж╛ржЧ, ржмрж┐рж░ржХрзНржд, рж╣рждрж╛рж╢рж╛, ржЕрж╕рзНржерж┐рж░рждрж╛, ржжрзБрж╢рзНржЪрж┐ржирзНрждрж╛ ржЗрждрзНржпрж╛ржжрж┐) ржЖржкржирж╛ржХрзЗ ржкрзЗрзЯрзЗ ржмрж╕рж▓рзЗ, рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЙржкрж╢ржорзЗрж░ ржЬржирзНржп ржпрзЗ ржХрзЛржи рж░рж┐рж▓рж╛ржХрзНрж╕рзЗрж╢ржи; ржЗржорж╛ржЬрж┐ржирж╛рж░рж┐, ржмрзНрж░рж┐ржжрж┐ржВ ржмрж╛ ржорж╛рж╕ржХрж┐ржЙрж▓рж╛рж░ (ржкрзЗрж╢рзА) рж░рж┐рж▓рж╛ржХрзНрж╕рзЗрж╢ржи ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред рждржмрзЗ ржЖржкржирж┐ ржпржжрж┐ ржЦрзБржм ржмрж┐рж╖ржгрзНржг ржмрж╛ ржжрзБржГржЦржнрж╛рж░рж╛ржХрзНрж░рж╛ржирзНржд ржмрзЛржз ржХрж░рзЗржи, рж╕рзЗржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ рж░рж┐рж▓рж╛ржХрзНрж╕рзЗрж╢ржи ржирж╛ ржХрж░рзЗ ржЖржкржирж┐ ржмрж░ржВ ржорж╛ржЗржирзНржбржлрзБрж▓ржирзЗрж╕ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржХрж░рзБржиред
 
ржоржирзЗ рж░рж╛ржЦрж╛ ржЬрж░рзБрж░рзА, ржХрзЛржи ржХрзМрж╢рж▓ ржмрзНржпрж╛ржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЧрж┐рзЯрзЗ ржпржжрж┐ ржЖржкржирж╛рж░ ржоржирзЗ рж╣рзЯ, ржПржЯрж╛ ржЖржкржирж╛ржХрзЗ ржЖрж░ржУ ржЦрж╛рж░рж╛ржк ржЕржирзБржнрзВрждрж┐ ржжрж┐ржЪрзНржЫрзЗ, рждрж╛рж╣рж▓рзЗ ржЬрзЛрж░ ржХрж░рзЗ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржирж╛ ржХрж░рзЗ ржЖржкржирж┐ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржмржирзНржз рж░рж╛ржЦрзБржиред рж░рж┐рж▓рж╛ржХрзНрж╕рзЗрж╢ржи ржЦрзБржм ржирж┐рж░рж╛ржкржж ржПржмржВ рж╕рж╛ржзрж╛рж░ржгржд ржХрж╛рж░рзЛ ржЕрж╕рзБржмрж┐ржзрж╛ рж╣рзЯ ржирж╛ред рждржмрзЗ, ржмрж┐рж╖ржгрзНржг ржерж╛ржХрж▓рзЗ рж░рж┐рж▓рж╛ржХрзНрж╕рзЗрж╢ржи ржЖржкржирж╛рж░ рж╢рж╛рж░рзАрж░рж┐ржХ/ржорж╛ржирж╕рж┐ржХ ржЬрзЬрждрж╛ ржмрж╛рзЬрж┐рзЯрзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЗ, рждрж╛ржЗ ржорж╛ржЗржирзНржбржлрзБрж▓ржирзЗрж╕ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржХрж░рж╛ рж╢рзНрж░рзЗрзЯред рждржмрзЗ, ржорж╛ржЗржирзНржбржлрзБрж▓ржирзЗрж╕ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕рзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржХрж╛рж░рзЛ ржХрж╛рж░рзЛ ржЕржнрзНржпржирзНрждрж░рзАржг ржЧржнрзАрж░ ржЦржд ржЦрзБржм ржмрзЗрж╢рж┐ рж╕ржХрзНрж░рж┐рзЯ рж╣рзЯрзЗ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ, рж╕рзЗржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржЖржкржирж┐ ржмрж┐рж░рждрж┐ ржирж┐рзЯрзЗ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржХрж░рзБржи ржЕржержмрж╛ ржЪрзЛржЦ ржЦрзБрж▓рзЗ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ржЯрж┐ ржЪрж╛рж▓рж┐рзЯрзЗ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржиред
 
ржХрзЛржи ржХрзМрж╢рж▓ ржмрзНржпржмрж╣рж╛рж░рзЗ ржирж┐ржЬрзЗржХрзЗ ржЕрждрзНржпржзрж┐ржХ ржЪрж╛ржк ржжрзЗржмрж╛рж░ ржжрж░ржХрж╛рж░ ржирж╛ржЗ, ржЖржмрж╛рж░ ржпрзЗржоржи ржирж┐ржЬрзЗржХрзЗ ржЕрждрзНржпржзрж┐ржХ ржЫрж╛рзЬ ржжрзЗржмрж╛рж░ржУ ржжрж░ржХрж╛рж░ ржирж╛ржЗред рждрзАржмрзНрж░ ржирзЗрждрж┐ржмрж╛ржЪржХ ржЕржирзБржнрзВрждрж┐ ржЖржЪрзНржЫржирзНржи ржоржи ржирж┐рзЯрзЗ ржПржЗ ржХрзМрж╢рж▓ржЧрзБрж▓рзЛ ржкрзНрж░рзЯрзЛржЧ ржХрж░рж╛ ржХржарж┐ржи ржоржирзЗ рж╣рждрзЗ ржкрж╛рж░рзЗ, ржоржи ржмрж╛рж░ржмрж╛рж░ ржирж╛ржирж╛ржи ржЪрж┐ржирзНрждрж╛рзЯ ржЕржирзНржп ржжрж┐ржХрзЗ ржЪрж▓рзЗ ржпрж╛ржмрзЗ, ржПржХржЯрзБ ржзрзИрж░рзНржп ржирж┐рзЯрзЗ ржкрзНрж░рзНржпрж╛ржХржЯрж┐рж╕ ржЪрж╛рж▓рж┐рзЯрзЗ ржпрж╛ржи, ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржоржирзЗ рж╕рзНржерж┐рж░рждрж╛ ржлрж┐рж░рзЗ ржЖрж╕ржмрзЗред
 
ржлрж┐ржЬрж┐ржХрзНржпрж╛рж▓ ржПржХрзНрж╕рж╛рж░рж╕рж╛ржЗржЬ ржмрж╛ ржмрзНржпрж╛рзЯрж╛ржо ржХрзЗржмрж▓ рж╢рж░рзАрж░ ржирзЯ, ржоржирзЗрж░ ржлрж┐ржЯржирзЗрж╕рзЗржУ ржЦрзБржмржЗ ржЗрждрж┐ржмрж╛ржЪржХ ржнрзВржорж┐ржХрж╛ рж░рж╛ржЦрзЗред рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЙржкрж╢ржо рж╣рж┐рж╕рзЗржмрзЗржУ ржЖржкржирж┐ рзирзж-рзйрзж ржорж┐ржирж┐ржЯ ржпрзЗ ржХрзЛржи ржмрзНржпрж╛рзЯрж╛ржо ржХрж░рзЗ ржирж┐ржЬрзЗржХрзЗ рж╕рзБрж╕рзНржерж┐рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи, ржирж┐рж░рж╛ржкржж ржХрзЛржи рж░рж╛рж╕рзНрждрж╛ ржмрж╛ ржорж╛ржарзЗ ржжрзНрж░рзБржд рж╣рж╛ржБржЯрж╛ржУ ржПржХржЯрж┐ ржнрж╛рж▓ ржмрзНржпрж╛рзЯрж╛ржоред ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржоржирзЛржпрзЛржЧржЯрж╛ржХрзЗ ржмрж╛рж░ржмрж╛рж░ ржмрж╛ржЗрж░рзЗрж░ ржжрж┐ржХрзЗ ржмрж╛ ржЖрж╢рзЗржкрж╛рж╢рзЗрж░ рж╢ржмрзНржж ржмрж╛ ржжрзГрж╢рзНржпрзЗ ржмрж╛ рж╢рж░рзАрж░рзЗ ржкрзЗрж╢рж┐рждрзЗ ржмрж╛ рж╕рзНржмрж╛рж╕рзЗрж░ ржжрж┐ржХрзЗ рж░рж╛ржЦрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗржи ржпрж╛рждрзЗ ржЖржкржирж╛рж░ ржоржи ржХрзЛржи ржЪрж┐ржирзНрждрж╛ ржмрж╛ ржмрж┐ржЪрж╛рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗ ржЦрзБржм ржмрзЗрж╢рж┐ ржбрзБржмрзЗ ржпрзЗрждрзЗ ржирж╛ ржкрж╛рж░рзЗред`);

      setModalNavigateTo('TatkhonikUposhom');
    }

    if (sectionName === 'CopyingCards') {
      setModalVisible(true);
      setModalTitle('ржЕржирзБрж╢рзАрж▓ржи ржХрж╛рж░рзНржбрж╕');
      setModalDescription(`ржХрзЛржкрж┐ржВ ржХрж╛рж░рзНржб рж╕ржВржХржЯржкрзВрж░рзНржг ржорзБрж╣рзВрж░рзНрждржЧрзБрж▓рзЛ рж╕рж╛ржорж╛рж▓ ржжрзЗржмрж╛рж░ ржЬржирзНржп ржЦрзБржм рж╕рж╣ржЬ ржПржмржВ ржЦрзБржм ржХрж╛рж░рзНржпржХрж░рзА ржПржХржЯрж╛ ржкржжрзНржзрждрж┐ ржпрзЗржЦрж╛ржирзЗ ржПржХржжржо ржирж┐ржЬрж╕рзНржм ржХрзЛржкрж┐ржВ рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЧрзБрж▓рзЛ рж▓рж┐ржЦрж╛ ржерж╛ржХрзЗред

ржЖржкржирж┐ ржХрж╛ржЧржЬрзЗ ржЖржкржирж╛рж░ ржХрзЛржкрж┐ржВ рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЧрзБрж▓рзЛ рж▓рж┐ржЦрзЗ рж░рж╛ржЦрзБржиред ржпрзЗрж╕ржм ржЕржмрж╕рзНржерж╛ ржмрж╛ ржкрж░рж┐рж╕рзНржерж┐рждрж┐ рж╕рж╛ржорж╛рж▓ ржжрзЗрзЯрж╛ ржЖржкржирж╛рж░ ржЬржирзНржп ржХржарж┐ржи рж╣рзЯрзЗ ржУржарзЗ, рж╕рзЗржЦрж╛ржирзЗ ржЖржкржирж┐ ржХрзА ржХрзА ржХрж░рж▓рзЗ ржмрж╛ ржирж┐ржЬрзЗржХрзЗ ржХрзА ржмрж▓рж▓рзЗ ржЕржержмрж╛ ржХрзА ржоржирзЗ ржХрж░рж┐рзЯрзЗ ржжрж┐рж▓рзЗ ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж╛ржЬрзЗ рж▓рж╛ржЧржмрзЗ, рж╕рзЗржЧрзБрж▓рзЛ ржЖржЧрзЗржЗ ржЖржкржирж┐ ржЖржкржирж╛рж░ ржХрж╛рж░рзНржбрзЗ ржмрж╛ ржХрж╛ржЧржЬрзЗ рж▓рж┐ржЦрзЗ ржлрзЗрж▓рзБржиред рж▓рж┐ржЦрж╛рж░ рж╕ржорзЯ ржПржХржЯрзБ рж╕ржорзЯ ржирж┐рзЯрзЗ ржЪрж┐ржирзНрждрж╛ржнрж╛ржмржирж╛ ржХрж░рзЗ рж▓рж┐ржЦрзБржи, рж╕рзЗржЧрзБрж▓рзЛ ржпрзЗржи ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж╛рж░рзНржпржХрж░рзА рж╣рзЯред ржПржЗ рж╕рзНржЯрзЗржЯржорзЗржирзНржЯржЧрзБрж▓рзЛ ржпржерж╛рж╕ржорзНржнржм ржЫрзЛржЯ ржУ рж╕рж░рж▓ рж░рж╛ржЦрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи, ржпрж╛рждрзЗ рж╕рж╣ржЬрзЗржЗ ржЖржкржирж┐ ржирж┐ржЬрзЗржХрзЗ ржоржирзЗ ржХрж░рж┐рзЯрзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЗржиред ржПржмржВ ржХрж╛рж░рзНржбржЯрж╛ ржирж┐ржЬрзЗрж░ рж╕рж╛ржерзЗ рж░рж╛ржЦрзБржи ржПржмржВ ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ ржХрж╛рж░рзНржбржЯрж╛ ржжрзЗржЦрзБржи ржпрж╛рждрзЗ ржпржерж╛рж╕ржорзЯрзЗ ржПржЯрж╛ ржоржирзЗ ржХрж░рждрзЗ ржЖржкржирж╛ржХрзЗ ржмрзЗржЧ ржкрзЗрждрзЗ ржирж╛ рж╣рзЯред

рж╕рзНржкрж╖рзНржЯ ржзрж╛рж░ржгрж╛рж░ ржЬржирзНржп ржПржЦрж╛ржирзЗ ржЕржирзЗржХржЧрзБрж▓рзЛ ржЙржжрж╛рж╣рж░ржг ржжрзЗрзЯрж╛ ржЖржЫрзЗред`);

      setModalNavigateTo('CopyingCards');
      setModalButtonText('ржЕржирзБрж╢рзАрж▓ржи ржХрж╛рж░рзНржбрж╕ ржжрзЗржЦрзБржи');
    }
  };

  useEffect(() => {
    BackHandler.addEventListener(
      'hardwareBackPress',
      handleBackButtonClick,
    );
    return () => {
      BackHandler.removeEventListener(
        'hardwareBackPress',
        handleBackButtonClick,
      );
    };
  }, []);

  return (
    <View>
      <ScrollView>
        <View
          style={{
            backgroundColor: '#479162',
            borderBottomRightRadius: 24,
            borderBottomLeftRadius: 24,
            paddingTop: 16.5,
            marginBottom: 15,
            paddingLeft: 7,
            shadowColor: 'black',
            shadowOffset: 50,
            elevation: 2,
            paddingBottom: 25,
          }}
        >
          <Text
            style={{
              fontSize: 35,
              padding: 10,
              paddingBottom: 6,
              paddingTop: 30,
              color: '#fffef4',
              fontFamily: 'playfair-bold',
              textAlign: 'center',
            }}
          >
            Hi {username}!
          </Text>
          <Text
            style={{
              fontSize: 20,
              padding: 12,
              paddingVertical: 2,
              letterSpacing: 0.4,
              textAlign: 'center',
              fontFamily: 'Roboto',
              marginBottom: 17,
              color: '#fffef4',
            }}
          >
            ржЖржкржирж┐ ржЖржЬ ржХрзЗржоржи ржЖржЫрзЗржи?
          </Text>
          <View
            style={{
              flexDirection: 'row',
              justifyContent: 'center',
            }}
          >
            {emoji.map((em) => (
              <TouchableOpacity
                key={em.label}
                style={{
                  justifyContent: 'center',
                  alignItems: 'center',
                  backgroundColor: 'white',
                  width: em.weight,
                  marginRight: 8,
                  borderRadius: 10,
                  elevation: 10,
                  shadowOffset: 50,
                  shadowColor: 'black',
                  borderColor: '#483838',
                  paddingBottom: 3.5,
                }}
                onPress={() => handleEmojiPress(em)}
              >
                <Text
                  style={{
                    fontSize: 22,
                    paddingBottom: 1.2,
                    paddingTop: 6,
                  }}
                >
                  {em.icon}
                </Text>
                <View
                  style={{
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignSelf: 'center',
                    height: 30,
                    marginBottom: 2,
                  }}
                >
                  <Text
                    style={{
                      fontSize: 11,
                      color: '#483838',
                      textAlign: 'center',

                      paddingHorizontal: 2,
                      fontWeight: 'bold',
                    }}
                  >
                    {em.banglaLabel}
                  </Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        </View>
        <View>
          <View
            style={{
              paddingHorizontal: 20,
              paddingVertical: 5,
              marginBottom: 8,
              marginTop: 10,
            }}
          >
            <Text
              style={{
                fontSize: 20.5,
                fontWeight: 'bold',
                color: '#3c7a53',
              }}
            >
              Got Some More Time?
            </Text>
            <Text
              style={{
                fontSize: 13,
                paddingTop: 4,
                color: '#816565',
                letterSpacing: 0.16,
              }}
            >
              Here are some longer acitivities you might like{' '}
            </Text>
          </View>
          <View style={styles.featureContainer}>
            <TouchableWithoutFeedback
              onPress={() =>
                navigation.navigate('AssessmentList', {
                  goBack: screenName,
                })
              }
            >
              <View style={styles.eachFeatureContainer}>
                <View style={styles.eachFeatureMainContainer}>
                  <View
                    style={{ display: 'flex', flexDirection: 'row' }}
                  >
                    <View style={styles.featureLeftImage}>
                      <ImageBackground
                        source={require('../assests/images/assessment.jpeg')}
                        style={styles.imageBackground}
                      ></ImageBackground>
                    </View>
                    <View>
                      <Text style={styles.featureHeading}>
                        ржорж╛ржирж╕рж┐ржХ ржЕржмрж╕рзНржерж╛ ржпрж╛ржЪрж╛ржЗ
                      </Text>
                      <Text style={styles.featureSubheading}>
                        Self Assessment
                      </Text>
                    </View>
                  </View>
                  <View style={styles.featureIconContainer}>
                    <AntDesign
                      name="rightcircleo"
                      size={24}
                      color="#42855B"
                    />
                  </View>
                </View>
              </View>
            </TouchableWithoutFeedback>

            <TouchableWithoutFeedback
              onPress={() =>
                setIsPressedOnPsychoEducation((prev) => !prev)
              }
            >
              <View
                style={[
                  styles.eachFeatureContainer,
                  !isPressedOnPsychoeducation
                    ? {}
                    : styles.eachFeatureContainerPress,
                ]}
              >
                <View style={styles.eachFeatureMainContainer}>
                  <View
                    style={{ display: 'flex', flexDirection: 'row' }}
                  >
                    <View style={styles.featureLeftImage}>
                      <ImageBackground
                        source={require('../assests/images/psychoeducation.jpeg')}
                        style={styles.imageBackground}
                      ></ImageBackground>
                    </View>
                    <View>
                      <Text
                        style={[
                          styles.featureHeading,
                          !isPressedOnPsychoeducation
                            ? {}
                            : styles.featureHeadingPressed,
                        ]}
                      >
                        ржорж╛ржирж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржорзНржкрж░рзНржХрж┐ржд рждржерзНржп
                      </Text>
                      <Text
                        style={[
                          styles.featureSubheading,
                          isPressedOnPsychoeducation
                            ? { color: '#666' }
                            : {},
                        ]}
                      >
                        Psycho Education
                      </Text>
                    </View>
                  </View>
                  <View style={styles.featureIconContainer}>
                    <AntDesign
                      name={
                        isPressedOnPsychoeducation
                          ? 'downcircle'
                          : 'rightcircleo'
                      }
                      size={24}
                      color="#3c7a53"
                    />
                  </View>
                </View>
                {isPressedOnPsychoeducation && (
                  <View style={{ paddingTop: 10, paddingLeft: 0 }}>
                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name === 'Myths and facts',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржорж┐рже ржПржмржВ ржмрж╛рж╕рзНрждржмрждрж╛
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name === 'What is mental health',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржорж╛ржирж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж▓рждрзЗ ржЖржорж░рж╛ ржХрж┐ ржмрзБржЭрж┐?
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name === 'What is psychotherapy',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        рж╕рж╛ржЗржХрзЛржерзЗрж░рж╛ржкрж┐ ржХрж┐?
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name ===
                              'Mental Health Counselling',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржорж╛ржирж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп ржХрж╛ржЙржирзНрж╕рзЗрж▓рж┐ржВ
                      </Text>
                    </TouchableOpacity>
                  </View>
                )}
              </View>
            </TouchableWithoutFeedback>

            <TouchableWithoutFeedback
              onPress={() =>
                setIsPressedOnReadingMaterials((prev) => !prev)
              }
            >
              <View
                style={[
                  styles.eachFeatureContainer,
                  !isPressedOnReadingMaterials
                    ? {}
                    : styles.eachFeatureContainerPress,
                ]}
              >
                <View style={styles.eachFeatureMainContainer}>
                  <View
                    style={{ display: 'flex', flexDirection: 'row' }}
                  >
                    <View style={styles.featureLeftImage}>
                      <ImageBackground
                        source={require('../assests/images/specificissues.jpeg')}
                        style={styles.imageBackground}
                      ></ImageBackground>
                    </View>
                    <View>
                      <Text
                        style={[
                          styles.featureHeading,
                          !isPressedOnReadingMaterials
                            ? {}
                            : styles.featureHeadingPressed,
                        ]}
                      >
                        ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж┐ржЫрзБ ржмрж┐рж╖рзЯ
                      </Text>
                      <Text
                        style={[
                          styles.featureSubheading,
                          isPressedOnReadingMaterials
                            ? { color: '#666' }
                            : {},
                        ]}
                      >
                        Specific Issues
                      </Text>
                    </View>
                  </View>
                  <View style={styles.featureIconContainer}>
                    <AntDesign
                      name={
                        isPressedOnReadingMaterials
                          ? 'downcircle'
                          : 'rightcircleo'
                      }
                      size={24}
                      color="#3c7a53"
                    />
                  </View>
                </View>
                {isPressedOnReadingMaterials && (
                  <View style={{ paddingTop: 10, paddingLeft: 0 }}>
                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) => issue.name === 'Relationship',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржкрзНрж░рж┐рзЯржЬржирзЗрж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрж░рзНржХрзЗрж░ ржЙржирзНржирзЯржи
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) => issue.name === 'Study skill',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржкрзЬрж╛рж╢рзЛржирж╛ рж╕ржорзНржкрж░рзНржХрж┐ржд ржжржХрзНрж╖рждрж╛
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name === 'Anger Management',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        рж░рж╛ржЧ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) => issue.name === 'Sleep Hygine',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржШрзБржо
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name === 'Suicidal Tendency',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржЖрждрзНржирж╣рждрзНржпрж╛ ржкрзНрж░ржмржгрждрж╛ ржкрзНрж░рждрж┐рж░рзЛржз
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name ===
                              'Focusing on good moments',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржнрж╛рж▓рзЛрж▓рж╛ржЧрж╛рж░ ржорзБрж╣рзВрж░рзНржд ржЧрзБрж▓рзЛрзЯ ржоржи ржжрзЗрзЯрж╛
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) =>
                              issue.name === 'Learn to love yourself',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржирж┐ржЬрзЗржХрзЗ ржнрж╛рж▓ржмрж╛рж╕рждрзЗ ржЬрж╛ржирж╛
                      </Text>
                    </TouchableOpacity>
                  </View>
                )}
              </View>
            </TouchableWithoutFeedback>

            <TouchableWithoutFeedback
              onPress={() =>
                setIsPressedOnSonkhiptoKoushol((prev) => !prev)
              }
            >
              <View
                style={[
                  styles.eachFeatureContainer,
                  !isPressedOnSonkhiptoKoushol
                    ? {}
                    : styles.eachFeatureContainerPress,
                ]}
              >
                <View style={styles.eachFeatureMainContainer}>
                  <View
                    style={{ display: 'flex', flexDirection: 'row' }}
                  >
                    <View style={styles.featureLeftImage}>
                      <ImageBackground
                        source={require('../assests/images/genericIntervention.jpeg')}
                        style={styles.imageBackground}
                      ></ImageBackground>
                    </View>
                    <View>
                      <Text
                        style={[
                          styles.featureHeading,
                          !isPressedOnSonkhiptoKoushol
                            ? {}
                            : styles.featureHeadingPressed,
                        ]}
                      >
                        рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржХрж┐ржЫрзБ ржХрзМрж╢рж▓
                      </Text>
                      <Text
                        style={[
                          styles.featureSubheading,
                          isPressedOnSonkhiptoKoushol
                            ? { color: '#666' }
                            : {},
                        ]}
                      >
                        Some Brief Techniques
                      </Text>
                    </View>
                  </View>
                  <View style={styles.featureIconContainer}>
                    <AntDesign
                      name={
                        isPressedOnSonkhiptoKoushol
                          ? 'downcircle'
                          : 'rightcircleo'
                      }
                      size={24}
                      color="#3c7a53"
                    />
                  </View>
                </View>
                {isPressedOnSonkhiptoKoushol && (
                  <View style={{ paddingTop: 10, paddingLeft: 0 }}>
                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() => showModal('CopyingCards')}
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржЕржирзБрж╢рзАрж▓ржи ржХрж╛рж░рзНржбрж╕
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ReadingMaterials', {
                          data: readingMaterials.find(
                            (issue) => issue.name === 'Study skill',
                          ),
                          goBack: screenName,
                        })
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        рж╕рзНржЯрж╛ржбрж┐ рж╕рзНржХрж┐рж▓рж╕
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate(
                          'TechniqueWithInputFields',
                          {
                            id: 'technique_of_paying_attention_to_good_moments',
                            banglaName:
                              'ржнрж╛рж▓ рж▓рж╛ржЧрж╛рж░ ржорзБрж╣рзБрж░рзНрждржЧрзБрж▓рзЛржпрж╝ ржоржи ржжрзЗрзЯрж╛',
                            goBack: screenName,
                          },
                        )
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржнрж╛рж▓ рж▓рж╛ржЧрж╛рж░ ржорзБрж╣рзБрж░рзНрждржЧрзБрж▓рзЛржпрж╝ ржоржи ржжрзЗрзЯрж╛рж░ ржХрзМрж╢рж▓
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate(
                          'TechniqueWithInputFields',
                          {
                            id: 'learn_how_to_love_yourself',
                            banglaName: 'ржирж┐ржЬрзЗржХрзЗ ржнрж╛рж▓ржмрж╛рж╕рждрзЗ ржЬрж╛ржирж╛рж░ ржХрзМрж╢рж▓',
                            goBack: screenName,
                          },
                        )
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржирж┐ржЬрзЗржХрзЗ ржнрж╛рж▓ржмрж╛рж╕рждрзЗ ржЬрж╛ржирж╛рж░ ржХрзМрж╢рж▓
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.subsectionContainer}
                      onPress={() =>
                        navigation.navigate('ThoughtChallengeInit')
                      }
                    >
                      <AntDesign
                        name="arrowright"
                        size={14}
                        color="black"
                        style={{ paddingTop: 4 }}
                      />
                      <Text style={styles.subsectionContainerText}>
                        ржЪрж┐ржирзНрждрж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи
                      </Text>
                    </TouchableOpacity>
                  </View>
                )}
              </View>
            </TouchableWithoutFeedback>

            <TouchableWithoutFeedback
              onPress={() => showModal('quickrelief')}
            >
              <View style={styles.eachFeatureContainer}>
                <View style={styles.eachFeatureMainContainer}>
                  <View
                    style={{ display: 'flex', flexDirection: 'row' }}
                  >
                    <View style={styles.featureLeftImage}>
                      <ImageBackground
                        source={require('../assests/images/quickrelief.jpeg')}
                        style={styles.imageBackground}
                      ></ImageBackground>
                    </View>
                    <View>
                      <Text style={styles.featureHeading}>
                        рждрж╛рзОржХрзНрж╖ржирж┐ржХ ржЙржкрж╢ржо
                      </Text>
                      <Text style={styles.featureSubheading}>
                        Quick Relief
                      </Text>
                    </View>
                  </View>
                  <View style={styles.featureIconContainer}>
                    <AntDesign
                      name="rightcircleo"
                      size={24}
                      color="#42855B"
                    />
                  </View>
                </View>
              </View>
            </TouchableWithoutFeedback>

            <TouchableWithoutFeedback
              onPress={() =>
                navigation.navigate('HelpCenter', {
                  goBack: screenName,
                })
              }
            >
              <View style={styles.eachFeatureContainer}>
                <View style={styles.eachFeatureMainContainer}>
                  <View
                    style={{ display: 'flex', flexDirection: 'row' }}
                  >
                    <View style={styles.featureLeftImage}>
                      <ImageBackground
                        source={require('../assests/images/helpCenter.jpeg')}
                        style={styles.imageBackground}
                      ></ImageBackground>
                    </View>
                    <View>
                      <Text style={styles.featureHeading}>
                        рж╕рж╛рж╣рж╛ржпрзНржп ржХрзЗржирзНржжрзНрж░
                      </Text>
                      <Text style={styles.featureSubheading}>
                        Help Center
                      </Text>
                    </View>
                  </View>
                  <View style={styles.featureIconContainer}>
                    <AntDesign
                      name="rightcircleo"
                      size={24}
                      color="#42855B"
                    />
                  </View>
                </View>
              </View>
            </TouchableWithoutFeedback>
          </View>
        </View>
        <View style={{ marginVertical: 8 }}>
          <AppButton
            title="рж▓ржЧ ржЖржЙржЯ ржХрж░рзБржи"
            onPress={logoutFromApp}
            style={{ backgroundColor: '#52a871' }}
            textStyle={{ fontSize: 18 }}
          />
        </View>
        <Toast />

        <Modal
          animationType="slide"
          transparent={true}
          visible={modalVisible}
          onRequestClose={closeModal}
        >
          <View style={styles.centeredView}>
            <View
              style={[
                styles.modalView,
                { marginTop: Constants.statusBarHeight },
              ]}
            >
              <ModalWithTitleDescription
                title={modalTitle}
                description={modalDescription}
                buttonText={
                  modalButtonText !== ''
                    ? modalButtonText
                    : 'ржкрж░ржмрж░рзНрждрзА ржкрзЗржЗржЬрзЗ ржпрж╛ржи'
                }
                closeModal={closeModal}
                navigateTo={modalNavigateTo}
                goBack={screenName}
                modalButtonText={modalButtonText}
                icon={modalIcon}
                returnToHomepageExists={modalReturnToHomepageExists}
              />
            </View>
          </View>
        </Modal>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  sectionHeaderContainer: {
    padding: 10,
    paddingLeft: 15,
    paddingBottom: 3,
  },
  sectionHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    fontFamily: 'Roboto',
  },
  boxModelContainer: {
    display: 'flex',
    height: 100,
    width: 130,
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 5,
    margin: 10,
    marginRight: 0,
    backgroundColor: '#F38181',
    shadowColor: 'black',
    shadowOffset: 50,
    elevation: 2,
    borderRadius: 15,
  },
  boxModelLastContainer: {
    marginRight: 10,
  },
  boxModel: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
    lineHeight: 22,
    fontFamily: 'Roboto',
    letterSpacing: 0.15,
  },
  imageBackground: {
    height: '100%',
    width: '100%',
  },
  linearGradient: {
    opacity: 0.3,
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
  },
  featureContainer: {},
  eachFeatureMainContainer: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  eachFeatureContainer: {
    activeOpacity: 1,

    marginHorizontal: 15,
    marginVertical: 5,
    padding: 10,

    borderColor: '#a0d1b2',
    borderRadius: 5,
    borderWidth: 1,

    shadowColor: 'black',
    backgroundColor: 'white',

    borderLeftWidth: 6,
  },
  eachFeatureContainerPress: {
    borderColor: '#52a872',
    borderWidth: 2,
    backgroundColor: 'white',
    borderLeftWidth: 2,
  },
  featureIconContainer: {
    alignSelf: 'center',
    paddingRight: 7,
  },
  featureLeftImage: {
    height: 47,
    width: 47,
    marginRight: 8,
    borderRadius: 5,
  },
  featureHeading: {
    fontSize: 15.5,
    marginBottom: 2,
    paddingLeft: 4,
    paddingTop: 2.5,
    fontFamily: 'Roboto',
  },
  featureHeadingPressed: {
    fontWeight: 'bold',
    color: '#366f4b',
    fontSize: 18,
    paddingTop: 0,
  },
  featureSubheading: {
    fontSize: 12,
    color: '#777',
    paddingLeft: 4,
    paddingTop: 1,
    fontFamily: 'openSans',
  },
  subsectionContainer: {
    padding: 10,
    display: 'flex',
    flexDirection: 'row',
    marginBottom: 5,
    paddingVertical: 11,

    borderRadius: 5,
    elevation: 0.1,
  },
  subsectionContainerText: {
    paddingLeft: 5,
    fontSize: 15,
    color: '#333',
  },

  centeredView: {
    flex: 1,
    marginBottom: 0,
    height: '100%',
  },
  modalView: {
    margin: 10,
    paddingBottom: 0,
    backgroundColor: 'white',
    borderRadius: 0,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    borderRadius: 10,
  },
  scrollViewStyle: {
    height: '100%',
  },
});

const mapStateToProps = (state) => ({
  isAuthenticated: state.auth.isAuthenticated,
  isAccountVerified: state.auth.isAccountVerified,
  accessToken: state.auth.accessToken,
  refreshToken: state.auth.refreshToken,
});

export default connect(mapStateToProps, { logoutAction })(Homepage);
